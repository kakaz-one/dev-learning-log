
作業内容
「図解！アルゴリズムのツボとコツがゼッタイにわかる本」のcchapter03「アルゴリズムでよく使うデータ構造」の04「スタック(後入れ先出しリストの構造)」、05「キュー(先入れ先出しリストの構造)」を読んだ

学習内容
スタックとは、データ構造の一種で、後入れ先出し（LIFO: Last In, First Out）の原則に従って動作する抽象的なデータ型です。

スタックの特徴
後入れ先出し（LIFO）: 最後に追加された要素が最初に取り出される
制限された操作: 主に2つの基本操作のみ
プッシュ（push）: 要素をスタックの一番上に追加
ポップ（pop）: 一番上の要素を取り出し

身近な例
本の積み重ね: 新しい本を上に積み、一番上の本から取り出す
ブラウザの戻るボタン: 訪問したページの履歴をスタックで管理
テキストエディタのアンドゥ機能: 操作履歴をスタックで管理

実装例（PHP）
class Stack {
    private $items = [];
    
    // 要素を追加（プッシュ）
    public function push($item) {
        $this->items[] = $item;
    }
    
    // 一番上の要素を取り出し（ポップ）
    public function pop() {
        if ($this->isEmpty()) {
            return null;
        }
        return array_pop($this->items);
    }
    
    // スタックが空かチェック
    public function isEmpty() {
        return empty($this->items);
    }
    
    // スタックのサイズを取得
    public function size() {
        return count($this->items);
    }
}

使用例
$stack = new Stack();
$stack->push("最初");
$stack->push("二番目");
$stack->push("最後");

echo $stack->pop(); // "最後"が出力される
echo $stack->pop(); // "二番目"が出力される
echo $stack->pop(); // "最初"が出力される

スタックは、アルゴリズムやプログラミングで非常に重要な概念で、再帰処理、括弧の対応チェック、逆ポーランド記法の計算など、多くの場面で活用されています


キューとは、データ構造の一種で、先入れ先出し（FIFO: First In, First Out）の原則に従って動作する抽象的なデータ型です。

キューの特徴
先入れ先出し（FIFO）: 最初に追加された要素が最初に取り出される
制限された操作: 主に2つの基本操作のみ
エンキュー（enqueue）: 要素をキューの最後尾に追加
デキュー（dequeue）: キューの先頭から要素を取り出し

身近な例
銀行の窓口: 先に並んだ人が先にサービスを受ける
レストランの待ち行列: 先に来た客から順番に案内される
印刷ジョブ: 先に送信された印刷が先に処理される
Webサーバーのリクエスト処理: 先に来たリクエストから順番に処理